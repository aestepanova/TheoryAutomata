# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : parserSMC.sm

import statemap


class CommandClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Dash(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def LetterOrDigit(self, fsm, c):
        self.Default(fsm)

    def Point(self, fsm, c):
        self.Default(fsm)

    def Slash(self, fsm, c):
        self.Default(fsm)

    def Space(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(CommandClassState):
    pass

class Map1_Start(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.LettersDigits)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Points)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SpaceBeforeCommand)
        fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_Points(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.TwoPoints)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Slashes)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_TwoPoints(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Slashes)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_Slashes(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.LettersDigits)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Points)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_SpaceBeforeCommand(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.LettersDigits)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Points)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SpaceBeforeCommand)
        fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_LettersDigits(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
            ctxt.AddCommand()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.LettersDigits)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.CommandPoint)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.Slashes)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.AddCommand()
        finally:
            fsm.setState(Map1.SpaceBeforeKeys)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_CommandPoint(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.ExtensionLD)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_ExtensionLD(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
            ctxt.AddCommand()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.FormCommand(c)
        finally:
            fsm.setState(Map1.ExtensionLD)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.AddCommand()
        finally:
            fsm.setState(Map1.SpaceBeforeKeys)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_SpaceBeforeKeys(Map1_Default):

    def Dash(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Dashes)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_Dashes(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.AddKey(c)
        finally:
            fsm.setState(Map1.KeyLD)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_KeyLD(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SpaceBeforeKeys)
        fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)

class Map1_OK(Map1_Default):
    pass

class Map1_Error(Map1_Default):

    def Dash(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def LetterOrDigit(self, fsm, c):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def Point(self, fsm, c):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def Slash(self, fsm, c):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def Space(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    Points = Map1_Points('Map1.Points', 1)
    TwoPoints = Map1_TwoPoints('Map1.TwoPoints', 2)
    Slashes = Map1_Slashes('Map1.Slashes', 3)
    SpaceBeforeCommand = Map1_SpaceBeforeCommand('Map1.SpaceBeforeCommand', 4)
    LettersDigits = Map1_LettersDigits('Map1.LettersDigits', 5)
    CommandPoint = Map1_CommandPoint('Map1.CommandPoint', 6)
    ExtensionLD = Map1_ExtensionLD('Map1.ExtensionLD', 7)
    SpaceBeforeKeys = Map1_SpaceBeforeKeys('Map1.SpaceBeforeKeys', 8)
    Dashes = Map1_Dashes('Map1.Dashes', 9)
    KeyLD = Map1_KeyLD('Map1.KeyLD', 10)
    OK = Map1_OK('Map1.OK', 11)
    Error = Map1_Error('Map1.Error', 12)
    Default = Map1_Default('Map1.Default', -1)

class CommandClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
